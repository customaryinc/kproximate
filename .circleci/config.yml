version: 2.1

commands:
  setup_helm:
    steps:
      - run: curl -fsSL -o /tmp/get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
      - run: chmod 700 /tmp/get_helm.sh
      - run: /tmp/get_helm.sh
  login_to_ghcr:
    steps:
      - run:
          name: Login to ghcr
          command: echo $GITHUB_TOKEN | docker login ghcr.io -u $CIRCLE_PROJECT_USERNAME --password-stdin
  generate_version:
    steps:
      - run:
          name: Generate version
          command: |
            if [ "$CIRCLE_BRANCH" = "develop" ]; then 
              VERSION="0.0.0-beta-$CIRCLE_SHA1"
            else
              VERSION="${CIRCLE_TAG}"
            fi

            echo $VERSION
            echo "export VERSION=$VERSION" >> "$BASH_ENV"

jobs:
  test:
    working_directory: ~/project/kproximate
    docker:
      - image: cimg/go:1.25
    resource_class: large
    steps:
      - checkout:
          path: ~/project
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
            - go-mod-v1
      - run:
          name: Install Dependencies
          command: go get ./...
      - save_cache:
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"
      - run:
          name: Run tests
          command: go test ./...
  build_amd64_images:
    docker:
      - image: cimg/base:current  
    resource_class: large
    parameters:
      component:
        type: string
    steps:
      - setup_remote_docker
      - checkout
      - login_to_ghcr
      - generate_version
      - run:
          name: Build & push << parameters.component >> image
          command: docker build -f Dockerfile --build-arg COMPONENT=<< parameters.component >> -t ghcr.io/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME-<< parameters.component >>:$VERSION-amd64 --push .
  build_arm64_images:
    docker:
      - image: cimg/base:current
    resource_class: arm.large
    parameters:
      component:
        type: string
    steps:
      - setup_remote_docker
      - checkout
      - login_to_ghcr
      - generate_version
      - run:
          name: Build & push << parameters.component >> image
          command: docker build -f Dockerfile --build-arg COMPONENT=<< parameters.component >> -t ghcr.io/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME-<< parameters.component >>:$VERSION-arm64 --push .
  create_multiarch_manifest:
    docker:
      - image: cimg/base:current
    parameters:
      component:
        type: string
    steps:
      - setup_remote_docker
      - login_to_ghcr
      - generate_version
      - run:
          name: Create manifest
          command: |
            docker manifest create ghcr.io/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME-<< parameters.component >>:$VERSION \
              --amend ghcr.io/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME-<< parameters.component >>:$VERSION-amd64 \
              --amend ghcr.io/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME-<< parameters.component >>:$VERSION-arm64
      - run:
          name: Push manifest
          command: docker manifest push ghcr.io/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME-<< parameters.component >>:$VERSION
  publish_helm_chart:
    docker:
      - image: cimg/base:current
    steps:
      - setup_helm
      - checkout
      - login_to_ghcr
      - generate_version
      - run:
          name: Package the helm chart
          command: |
            helm repo add bitnami https://charts.bitnami.com/bitnami
            helm dependency build ./chart/$CIRCLE_PROJECT_REPONAME/
            helm package ./chart/$CIRCLE_PROJECT_REPONAME --version $VERSION --app-version $VERSION
      - run:
          name: Push the helm chart
          command: helm push $CIRCLE_PROJECT_REPONAME-$VERSION.tgz oci://ghcr.io/$CIRCLE_PROJECT_USERNAME

workflows:
  test_build_and_publish:
    jobs:
      - test:
          filters:
            tags:
              only: /\d+\.\d+\.\d+/
      - build_amd64_images:
          name: build amd64 << matrix.component >> image
          context:
            - github
          requires:
            - test
          matrix:
            parameters:
              component: ["controller", "worker"]
          filters:
            branches:
              only: develop
            tags:
              only: /\d+\.\d+\.\d+/
      - build_arm64_images:
          name: build arm64 << matrix.component >> image
          context:
            - github
          requires:
            - test
          matrix:
            parameters:
              component: ["controller", "worker"]
          filters:
            branches:
              only: develop
            tags:
              only: /\d+\.\d+\.\d+/
      - create_multiarch_manifest:
          context:
            - github
          requires:
            - build_amd64_images
            - build_arm64_images
          matrix:
            parameters:
              component: ["controller", "worker"]
          filters:
            branches:
              only: develop
            tags:
              only: /\d+\.\d+\.\d+/
      - publish_helm_chart:
          context:
            - github
          requires:
            - create_multiarch_manifest
          filters:
            branches:
              only: develop
            tags:
              only: /\d+\.\d+\.\d+/
